#!/bin/bash
set -euox pipefail

BASE_DIR="$(cd "$(dirname "$0")/.."; pwd)"
BUILDER_DOCKERFILE="${BASE_DIR}/build.Dockerfile"
DOCKERFILE="${BASE_DIR}/Dockerfile"
GH_ACTION_DOCKERFILE="${BASE_DIR}/.github/images/Dockerfile"
CIRCLECI_DOCKERFILE="${BASE_DIR}/.circleci/images/Dockerfile"


usage() {
	cat - 1>&2 <<-EOS
usage: deploy-images [<options>]

OPTIONS
	-h, --help    print this usage
	--latest      also tag as latest
EOS
}


main() {
	local arg="${1:-}"

	(cd "$BASE_DIR"
		local version
		version="$("$BASE_DIR/scripts/print-version")"

		local builder_image
		builder_image="$("$BASE_DIR/scripts/print-image-name" < "$BUILDER_DOCKERFILE")"

		local circleci_image
		circleci_image="$("$BASE_DIR/scripts/print-image-name" < "$CIRCLECI_DOCKERFILE")"

		local gh_action_image
		gh_action_image="$("$BASE_DIR/scripts/print-image-name" < "$GH_ACTION_DOCKERFILE")"

		local image
		image="$("$BASE_DIR/scripts/print-image-name" < "$DOCKERFILE")"

		# NOTE: Create a docker-container driver to avoid the following error:
		# > ERROR: Multi-platform build is not supported for the docker driver.
		# > Switch to a different driver, or turn on the containerd image store, and try again.
		# > Learn more at https://docs.docker.com/go/build-multi-platform/
		if ! docker buildx inspect unity-meta-check-driver; then
			docker run --privileged --rm tonistiigi/binfmt --install all
			docker buildx create --name unity-meta-check-driver --driver docker-container --bootstrap
		fi

		# NOTE: --push is necessary, because --load is not supported for multi-platform build yet.
		docker buildx build \
			--builder unity-meta-check-driver \
			--platform linux/arm64,linux/amd64 \
			--push \
			-t "$builder_image:latest" \
			-f "$BUILDER_DOCKERFILE" .

		if [[ "$arg" == "--latest" ]]; then
			docker buildx build \
				--builder unity-meta-check-driver \
				--platform linux/arm64,linux/amd64 \
				--push \
				-t "$image:$version" \
				-t "$image:latest" \
				-f "$DOCKERFILE" .
		else
				--builder unity-meta-check-driver \
				--platform linux/arm64,linux/amd64 \
				--push \
				-t "$image:$version" \
				-f "$DOCKERFILE" .
		fi

		if [[ "$arg" == "--latest" ]]; then
			docker buildx build \
				--builder unity-meta-check-driver \
				--platform linux/arm64,linux/amd64 \
				--push \
				-t "$gh_action_image:$version" \
				-t "$gh_action_image:latest" \
				-f "$GH_ACTION_DOCKERFILE" .
		else
			docker buildx build \
				--builder unity-meta-check-driver \
				--platform linux/arm64,linux/amd64 \
				--push \
				-t "$gh_action_image:$version" \
				-f "$GH_ACTION_DOCKERFILE" .
		fi

		if [[ "$arg" == "--latest" ]]; then
			docker buildx build \
				--builder unity-meta-check-driver \
				--platform linux/arm64,linux/amd64 \
				--push \
				-t "$circleci_image:$version" \
				-t "$circleci_image:latest" \
				-f "$CIRCLECI_DOCKERFILE" .
		else
			docker buildx build \
				--builder unity-meta-check-driver \
				--platform linux/arm64,linux/amd64 \
				--push \
				-t "$circleci_image:$version" \
				-f "$CIRCLECI_DOCKERFILE" .
		fi
	)
}


case "$*" in
	--help | -h)
		usage
		false ;;
	*)
		main "$@" ;;
esac
