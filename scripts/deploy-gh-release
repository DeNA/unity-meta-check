#!/bin/bash
set -euo pipefail

BASE_DIR="$(cd "$(dirname "$0")/.."; pwd)"


echo-stderr() {
	local message="$*"
	printf "%s\n" "$message" 1>&2
}


throw() {
	local message="$*"
	echo-stderr "error: $message"
	false
}


usage() {
	cat - 1>&2 <<-EOS
usage: deploy-gh-release [<options>]

OPTIONS
	-h, --help    print this usage
EOS
}


usage-error() {
	local message="$*"
	echo-stderr "$message"
	usage
	false
}


main() {
	local version
	version="$("$BASE_DIR/scripts/print-version")"

	gh --version || throw "gh must be available (see https://cli.github.com/)"
	gh auth status

	(cd "$BASE_DIR"
		local title
		title="$(git log -1 --format=%s HEAD)"

		(git tag | grep -Fqx "$version") || throw "tag does not exist: '$version'"
		git push origin "$version" || throw "a tag has the same name exists, so if still you want to overwrite the tag, please remove the tag on the remote and try again."

		echo-stderr "ENVIRONMENT"
		echo-stderr "revision to deploy:\n$(git rev-parse HEAD)\n"
		echo-stderr "go version:\n$(go version)\n"

		git checkout "$version" || throw "make git status clean and try again."

		echo-stderr "DEPLOY TO GITHUB RELEASES"
		echo-stderr "creating a github release if it does not exist..."

		if ! gh release view "$version"; then
			if echo "$version" | "$BASE_DIR/scripts/is-prerelease"; then
				gh release create --prerelease --title "$title" "$version"
			else
				gh release create --title "$title" "$version"
			fi
		fi
		echo-stderr
		
		echo-stderr "building executables..."
		make clean all
		echo-stderr

		[[ -d "./out" ]] || throw "cannot find the generated distribution dir: '${BASE_DIR}/out'"

		echo-stderr "uploading executables..."
		(cd "./out"
			find . -type f | sed 's/\.\///' | xargs gh release upload "$version"
		)

		gh release view -w "$version"
	)
}


case "$*" in
	--help | -h)
		usage
		false ;;
	*)
		main "$@" ;;
esac
