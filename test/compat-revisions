#!/bin/bash
set -euo pipefail

BASE_DIR="$(cd "$(dirname "$0")"; pwd)"


throw() {
	local message="$*"
	printf "error: %s\n" "$message" 1>&2
	false
}


error_help() {
	local message="$*"
	printf "error: %s\n" "$message" 1>&2
	usage
	false
}


usage() {
	echo 'usage: compat-revisions <old-unity-meta-check> <new-unity-meta-check> <workdir> [<num>]'
	echo
	echo 'ARGUMENTS'
	echo '  <old-unity-meta-check>    path to old unity-meta-check executable'
	echo '  <new-unity-meta-check>    path to new unity-meta-check executable'
	echo '  <workdir>    path to directory where compatibility tests running on'
	echo '  <num>        number of revisions from HEAD to test (default 10)'
	echo
	echo 'EXAMPLES'
	echo '  compat-revisions path/to/old/unity-meta-check path/to/new-unity-meta-check path/to/Unity/Project 100'
}


main() {
	local old_bin="${1:-}"
	local new_bin="${2:-}"
	local work_dir="${3:-}"
	local num="${4:-10}"

	"$old_bin" -version >/dev/null || error_help "old binary does not exist: $old_bin"
	"$new_bin" -version >/dev/null || error_help "new binary does not exist: $new_bin"

	[[ -d "$work_dir" ]] || error_help "working directory does not exist: $work_dir"
	(cd "$work_dir"
		git rev-parse --is-inside-work-tree >/dev/null || error_help "working directory is not in a git repository"

		local failed=0
		while read -r rev; do
			git checkout --quiet "$rev"
			printf "%s: " "$rev"

			if ! "${BASE_DIR}/compat" "$old_bin" "$new_bin" "$work_dir"; then
				failed=1
			fi
		done < <(git rev-list -n "$num" HEAD)

		[[ $failed -eq 0 ]]
	)
}


case "$*" in
	--help | -h)
		usage
		false ;;
	*)
		main "$@" ;;
esac
